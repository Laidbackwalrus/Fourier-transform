from audio_input import AudioInput
from algorithms import BasicFourierTransform
import numpy as np
import plotting

class PitchAnalyser:
    def __init__(self):
        self.audio_input = AudioInput()

    def live_analysis(self):
        # Perform pitch analysis on the data
        pass

    def static_analysis(self, file_path):
        """Perform static pitch analysis on the data"""
        
        file_data, sample_rate = self.audio_input.load_file(file_path)

        file_data = file_data[:len(file_data)//4]

        num_samples = len(file_data)
        duration = num_samples / sample_rate
        t = np.linspace(0, duration, num_samples, endpoint=False)

        ft = BasicFourierTransform(duration=duration, freq_range=(400, 500))
        integrals, winding_frequencies = ft.compute_transform(file_data, t)

        plotting.plot_freqencies(winding_frequencies, np.abs(integrals))

    def get_results(self):
        # Return the results of the analysis
        return self.data
    

test1 = PitchAnalyser()
test1.static_analysis("audio files/Sine_wave_440.ogg")